$date
	Tue Jun 16 13:33:27 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module test $end
$var wire 128 ! af [127:0] $end
$var wire 128 " str [127:0] $end
$var reg 128 # be [127:0] $end
$scope module shift $end
$var wire 8 $ i00 [7:0] $end
$var wire 8 % i01 [7:0] $end
$var wire 8 & i02 [7:0] $end
$var wire 8 ' i03 [7:0] $end
$var wire 8 ( i10 [7:0] $end
$var wire 8 ) i11 [7:0] $end
$var wire 8 * i12 [7:0] $end
$var wire 8 + i13 [7:0] $end
$var wire 8 , i20 [7:0] $end
$var wire 8 - i21 [7:0] $end
$var wire 8 . i22 [7:0] $end
$var wire 8 / i23 [7:0] $end
$var wire 8 0 i30 [7:0] $end
$var wire 8 1 i31 [7:0] $end
$var wire 8 2 i32 [7:0] $end
$var wire 8 3 i33 [7:0] $end
$var wire 128 4 in [127:0] $end
$var wire 32 5 in0 [31:0] $end
$var wire 32 6 in1 [31:0] $end
$var wire 32 7 in2 [31:0] $end
$var wire 32 8 in3 [31:0] $end
$var wire 128 9 out [127:0] $end
$var wire 32 : out0 [31:0] $end
$var wire 32 ; out1 [31:0] $end
$var wire 32 < out2 [31:0] $end
$var wire 32 = out3 [31:0] $end
$upscope $end
$scope module shift_inv $end
$var wire 8 > i00 [7:0] $end
$var wire 8 ? i01 [7:0] $end
$var wire 8 @ i02 [7:0] $end
$var wire 8 A i03 [7:0] $end
$var wire 8 B i10 [7:0] $end
$var wire 8 C i11 [7:0] $end
$var wire 8 D i12 [7:0] $end
$var wire 8 E i13 [7:0] $end
$var wire 8 F i20 [7:0] $end
$var wire 8 G i21 [7:0] $end
$var wire 8 H i22 [7:0] $end
$var wire 8 I i23 [7:0] $end
$var wire 8 J i30 [7:0] $end
$var wire 8 K i31 [7:0] $end
$var wire 8 L i32 [7:0] $end
$var wire 8 M i33 [7:0] $end
$var wire 128 N in [127:0] $end
$var wire 32 O in0 [31:0] $end
$var wire 32 P in1 [31:0] $end
$var wire 32 Q in2 [31:0] $end
$var wire 32 R in3 [31:0] $end
$var wire 128 S out [127:0] $end
$var wire 32 T out0 [31:0] $end
$var wire 32 U out1 [31:0] $end
$var wire 32 V out2 [31:0] $end
$var wire 32 W out3 [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1100000011010000111000001111 W
b1000000010010000101000001011 V
b100000001010000011000000111 U
b10000001000000011 T
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 S
b1100000000010000011000001011 R
b1000000011010000001000000111 Q
b100000010010000111000000011 P
b1010000101000001111 O
b1010000101000001111000001000000100100001110000000110000100000001101000000100000011100001100000000010000011000001011 N
b1011 M
b111 L
b11 K
b1111 J
b110 I
b10 H
b1110 G
b1010 F
b1 E
b1101 D
b1001 C
b101 B
b1100 A
b1000 @
b100 ?
b0 >
b1100000000010000011000001011 =
b1000000011010000001000000111 <
b100000010010000111000000011 ;
b1010000101000001111 :
b1010000101000001111000001000000100100001110000000110000100000001101000000100000011100001100000000010000011000001011 9
b1100000011010000111000001111 8
b1000000010010000101000001011 7
b100000001010000011000000111 6
b10000001000000011 5
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 4
b1111 3
b1011 2
b111 1
b11 0
b1110 /
b1010 .
b110 -
b10 ,
b1101 +
b1001 *
b101 )
b1 (
b1100 '
b1000 &
b100 %
b0 $
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 #
b1010000101000001111000001000000100100001110000000110000100000001101000000100000011100001100000000010000011000001011 "
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 !
$end
#100
